/**
 * @file ikey_value_provider.hpp
 * @brief Интерфейсы для работы с данными реестра
 * @details Определяет контракты для доступа к ключам и значениям реестра.
 *          Этот файл включает в себя интерфейсы, которые реализуют механизмы извлечения информации из реестра Windows.
*/

#pragma once

#include <string>
#include <vector>
#include "../exceptions/registry/registry_exception.hpp"
#include "../models.hpp"

namespace RegistryAnalysis {

/**
 * @interface IKeyValueProvider
 * @brief Интерфейс для доступа к данным реестра
 * @details Определяет контракт для чтения ключей и значений реестра.
 *          Реализация этого интерфейса предоставляет методы для извлечения всех значений по ключу и получения значения по имени.
 *          Интерфейс исключает детали реализации работы с реестром и фокусируется только на функционале получения данных.
*/
class IKeyValueProvider {
 public:
  /**
   * @brief Виртуальный деструктор интерфейса
   * @details Деструктор интерфейса, который должен быть переопределён в производных классах.
   *          Он вызывается при уничтожении объектов, реализующих этот интерфейс.
  */
  virtual ~IKeyValueProvider() = default;

  /**
   * @brief Получить все значения ключа
   * @param key_path Путь к ключу в реестре в формате "ROOT/Подраздел/..."
   * @return Вектор объектов типа RegistryValue, представляющих все значения, связанные с указанным ключом.
   * @throw SubkeyNotFoundError Если подраздел реестра не был найден по указанному пути.
   * @throw RootKeyError Если доступ к корневому ключу реестра невозможен.
   * @details Этот метод должен возвращать все значения, которые содержатся в указанном ключе реестра.
   *          В случае отсутствия указанного ключа или проблем с доступом, будут выброшены соответствующие исключения.
  */
  [[nodiscard]] virtual std::vector<Value> getAllKeyValues(
      const std::string& key_path) const = 0;

  /**
   * @brief Получить значение по имени
   * @param key_path Путь к целевому ключу реестра
   * @param value_name Имя значения (регистрозависимое), которое требуется получить.
   * @return Структура RegistryValue с данными, хранящимися в значении реестра.
   * @throw ValueNotFoundError Если значение с указанным именем не найдено в реестре.
   * @throw SubkeyNotFoundError Если ключ реестра, содержащий данное значение, не существует.
   * @details Этот метод возвращает одно значение по имени из указанного ключа реестра. Если значение не найдено или
   *          произошли проблемы с доступом к ключу, выбрасываются исключения ValueNotFoundError и SubkeyNotFoundError.
  */
  [[nodiscard]] virtual Value getValueByName(
      const std::string& key_path, const std::string& value_name) const = 0;
};

}
