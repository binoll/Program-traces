/**
 * @file registry_exception.hpp
 * @brief Исключения для работы с реестром Windows.
 * @details Этот файл содержит исключения, связанные с ошибками доступа и парсинга реестра Windows.
 *          Исключения могут возникать при попытке доступа к ключам, подразделам или значениям реестра, а также при ошибках чтения данных.
*/

#pragma once

#include <stdexcept>
#include <string>

namespace RegistryAnalysis {

/**
 * @class ValidateRegistry
 * @brief Базовый класс для ошибок, связанных с обработкой данных реестра.
 * @details Этот класс является базой для всех исключений, возникающих при анализе данных реестра.
*/
class ValidateRegistry : public std::runtime_error {
 public:
  /**
   * @brief Конструктор исключения для ошибок обработки данных реестра.
   * @param message Описание ошибки.
   * @details Этот конструктор передает сообщение об ошибке в базовый класс std::runtime_error.
   *          Используется для создания сообщений об ошибках, связанных с реестром.
  */
  explicit ValidateRegistry(const std::string& message)
      : std::runtime_error(message) {}

  /**
   * @brief Деструктор.
   * @details Переопределенный деструктор для корректной очистки.
  */
  ~ValidateRegistry() noexcept override = default;
};

/**
 * @class RootKeyError
 * @brief Исключение для ошибок доступа к корневому ключу реестра.
 * @details Это исключение генерируется, если не удается получить доступ к корневому ключу реестра Windows.
*/
class RootKeyError : public ValidateRegistry {
 public:
  /**
   * @brief Конструктор исключения для ошибки доступа к корневому ключу.
   * @details Формирует сообщение об ошибке при сбое доступа к корневому ключу реестра.
   *          Данное исключение выбрасывается, когда не удается открыть или прочитать корневой ключ реестра.
  */
  RootKeyError() : ValidateRegistry("Ошибка получения корневого ключа") {}
};

/**
 * @class SubkeyNotFoundError
 * @brief Исключение для ошибок поиска подраздела реестра.
 * @details Это исключение генерируется, если указанный подраздел реестра не найден по заданному пути.
*/
class SubkeyNotFoundError : public ValidateRegistry {
 public:
  /**
   * @brief Конструктор исключения для ошибки поиска подраздела реестра.
   * @param name Имя отсутствующего подраздела в реестре.
   * @details Формирует сообщение об ошибке с указанием имени отсутствующего подраздела.
   *          Это исключение выбрасывается, когда попытка доступа к подразделу реестра не увенчалась успехом.
  */
  explicit SubkeyNotFoundError(const std::string& name)
      : ValidateRegistry("Подраздел '" + name + "' не найден") {}
};

/**
 * @class ValueNotFoundError
 * @brief Исключение для ошибок поиска значения в реестре.
 * @details Это исключение генерируется, если указанное значение не найдено в ключе реестра.
*/
class ValueNotFoundError : public ValidateRegistry {
 public:
  /**
   * @brief Конструктор исключения для ошибки поиска значения в реестре.
   * @param name Имя отсутствующего значения в реестре.
   * @details Формирует сообщение об ошибке с указанием имени отсутствующего значения.
   *          Это исключение выбрасывается, когда не удается найти указанное значение в ключе реестра.
  */
  explicit ValueNotFoundError(const std::string& name)
      : ValidateRegistry("Значение '" + name + "' не найдено") {}
};

/**
 * @class BinaryDataReadError
 * @brief Исключение для ошибок чтения бинарных данных из реестра.
 * @details Это исключение генерируется, если произошел сбой при чтении бинарных данных из значения реестра.
*/
class BinaryDataReadError : public ValidateRegistry {
 public:
  /**
   * @brief Конструктор исключения для ошибки чтения бинарных данных.
   * @details Формирует сообщение об ошибке при сбое чтения бинарных данных.
   *          Это исключение выбрасывается, когда чтение бинарных данных из реестра не удалось.
  */
  BinaryDataReadError() : ValidateRegistry("Ошибка чтения бинарных данных") {}
};

/**
 * @class ValueDataExtractionError
 * @brief Исключение для ошибок извлечения данных из значения реестра.
 * @details Это исключение генерируется, если невозможно извлечь данные из значения реестра в требуемом формате.
*/
class ValueDataExtractionError : public ValidateRegistry {
 public:
  /**
   * @brief Конструктор исключения для ошибки извлечения данных.
   * @details Формирует сообщение об ошибке, если извлечение данных из значения реестра не удалось.
   *          Это исключение выбрасывается, когда данные из значения не могут быть преобразованы в нужный формат.
  */
  ValueDataExtractionError()
      : ValidateRegistry("Ошибка извлечения данных значения") {}
};

}
