/**
 * @file value_handle.hpp
 * @brief RAII-обёртка для работы с значениями реестра.
 * @details Этот файл содержит класс для безопасного управления ресурсами значений реестра с использованием принципа RAII.
 *          Класс гарантирует, что ресурсы значений будут автоматически освобождены при уничтожении объекта.
*/

#pragma once

#include <libregf.h>

namespace RegistryAnalysis {

/**
 * @class ValueHandle
 * @brief RAII-обёртка для управления значениями реестра.
 * @details Класс представляет собой обёртку для работы с значениями реестра. Он обеспечивает безопасное управление памятью
 *          при работе с значениями, автоматически освобождая связанные ресурсы при уничтожении объекта.
*/
class ValueHandle {
 public:
  /**
   * @brief Конструктор из сырого указателя.
   * @param value Указатель на значение реестра (может быть nullptr).
   * @details Этот конструктор принимает сырой указатель на значение реестра. Если указатель равен nullptr,
   *          объект будет инициализирован с пустым значением.
  */
  explicit ValueHandle(libregf_value_t* value = nullptr) noexcept;

  /**
   * @brief Конструктор перемещения.
   * @param other Временный объект ValueHandle.
   * @details Конструктор перемещения переносит владение ресурсом от другого объекта `ValueHandle` к текущему.
   *          Этот конструктор позволяет эффективно передавать объекты без копирования.
  */
  ValueHandle(ValueHandle&& other) noexcept;

  /**
   * @brief Оператор перемещающего присваивания.
   * @param other Временный объект ValueHandle.
   * @return Ссылку на текущий объект.
   * @details Оператор перемещающего присваивания позволяет перенести владение ресурсом от другого объекта
   *          без копирования. После присваивания текущий объект становится владельцем ресурса, а исходный
   *          объект теряет права на ресурс.
  */
  ValueHandle& operator=(ValueHandle&& other) noexcept;

  /**
   * @brief Деструктор.
   * @details Деструктор освобождает ресурсы, связанные со значением реестра. Он вызывается при уничтожении объекта.
   *          Если объект был инициализирован с ненулевым указателем, память будет освобождена.
  */
  ~ValueHandle();

  /**
   * @brief Запрещённый конструктор копирования.
   * @details Конструктор копирования запрещён, чтобы избежать неявных копий объектов, которые могут привести
   *          к ошибкам в управлении ресурсами.
  */
  ValueHandle(const ValueHandle&) = delete;

  /**
   * @brief Запрещённый оператор присваивания.
   * @details Оператор присваивания запрещён, чтобы предотвратить ошибочную копию объектов и возможные проблемы
   *          с двойным освобождением ресурсов.
   * @return Ссылку на текущий объект.
  */
  ValueHandle& operator=(const ValueHandle&) = delete;

  /**
   * @brief Нативный указатель на значение из libregf.
   * @details Этот указатель используется для доступа к значению реестра через библиотеку libregf.
  */
  libregf_value_t*
      ptr_;  ///< Указатель на значение реестра, управляемое данным объектом.
};

}
